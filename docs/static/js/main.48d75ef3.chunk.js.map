{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","className","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAmB/C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,UAAU,YACVC,YAAY,2BACZC,MAAQX,EACRY,SAtBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEII,MAAOF,GAFX,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKR,UAAU,2DAAf,UACI,qBAAKsB,IAAMd,EAAMU,MAAQA,IACzB,kCAAMA,EAAN,WCHCK,EAAU,SAAC,GAAmB,IAAhBjB,EAAe,EAAfA,SAAe,ECDd,SAAEA,GAAe,IAAD,EAEdhB,mBACtB,CACIuB,KAAM,GACNW,SAAS,IALuB,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAXAC,qBAAU,WACNtB,EAASC,GAAWsB,MAAM,SAAAC,GAEtBH,EAAS,CACLb,KAAMgB,EACNL,SAAS,SAIlB,CAAElB,IAEEmB,EDfwBK,CAAcxB,GAAjCa,EAJ0B,EAI/BN,KAAaW,EAJkB,EAIlBA,QAEpB,OACI,qCACI,oBAAIxB,UAAU,mDAAd,SAAmEM,IACjEkB,GAAW,mBAAGxB,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEQmB,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEdzBc,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,UADhB,mBACvB0C,EADuB,KACX3C,EADW,KAG9B,OACI,qCACI,oBAAIW,UAAU,YAAd,0BAEA,cAAC,EAAD,CAAcX,cAAgBA,IAC9B,6BAEQ2C,EAAWjB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADJA,Y,MCVnC2B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.48d75ef3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n        // console.log(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault(); \n        if( inputValue.trim().length > 2) {\n\n            setCategories( cats => [inputValue,  ...cats ]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                className=\"searchGif\"\n                placeholder=\"Search your favorite Gif\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n// Esto es un fragment, si no se utilizaran clases va asi\n// <>\n// </>\n","\n\nexport const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=xDhXF9seSCJpCCwEFp0z07HUe0x1Dpvg`;\n    const response = await fetch( url );\n    const { data } = await response.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-3s\">\n            <img src={ url } title={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n\n// export const GifGridItem = ( props ) => {\n//     console.log(props );\n\n//     return (\n//         <div>\n//             {/* { img.title } */}\n//         </div>\n//     )\n// }\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category }) => {\n\n    // const {state} = useFetchGifs();\n    // Desestructurar objeto state = { data, loagind}\n    const {data:images, loading} = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"title-category animate__animated animate__fadeIn\">{ category }</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map( img  => (\n                        <GifGridItem \n                            key={ img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState(\n        {\n            data: [],\n            loading: true\n        }\n    );\n\n    useEffect(() => {\n        getGifs( category ).then( imgs => {\n\n            setState({\n                data: imgs,\n                loading: false\n            })\n\n        } );\n    }, [ category ]);\n\n    return state; // { data: [], loading: true }\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Learn']);\n\n    return (\n        <>\n            <h2 className=\"title-app\">GifExpertApp</h2>\n\n            <AddCategory  setCategories={ setCategories }/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid\n                            key= { category }\n                            category={ category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n// shorcode => rafc\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}